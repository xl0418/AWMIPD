} else {
sp_name <-
c(sp_name, bci.spptable$Species[index])
genus_name <-
c(genus_name, bci.spptable$Genus[index])
}
}
species_name <- paste0(genus_name, '_', sp_name)
sp_code_name <- cbind(sp_code, species_name)
recognized_species <- which(species_name %in% tree$tip.label)
recognized_code_name <- sp_code_name[recognized_species,]
abundance <- NULL
for(i in c(1:nrow(recognized_code_name))) {
abundance_species <- length(which(bci_alive_data[, 1] == recognized_code_name[i, 1]))
abundance <- c(abundance, abundance_species)
}
abundance_data <- data.frame(sp = recognized_code_name[,1], species = recognized_code_name[,2], abundance = abundance)
not_in_species <- subset(species_name, !(species_name %in% tree$tip.label))
species_in <- subset(species_name, (species_name %in% tree$tip.label))
subset_species = species_in
subset_species
tree <- keep.tip(tree, subset_species)
distance_matrix <- ape::cophenetic.phylo(tree)
species_name_order <- rownames(distance_matrix)
abundance_index <- match(species_name_order, abundance_data$species)
abundance <- abundance_data$abundance[abundance_index]
#abundance <- log(abundance)
sp_order <- abundance_data$sp[abundance_index]
# phylogenetic distance
AD.matrix = sweep(distance_matrix, MARGIN=2, 1/as.matrix(abundance), `*`)
IPD.matrix = 1/AD.matrix
diag(IPD.matrix) = 0
total.dvalues = rowSums(IPD.matrix) * as.matrix(abundance)
D.normalized = (total.dvalues-min(total.dvalues))/(max(total.dvalues)-min(total.dvalues))
D.normalized
order_in_geo_data <- match(geographic_dis$sp ,sp_order)
geographic_dis['awmipd'] <- D.normalized[order_in_geo_data]
abundance_data
geographic_dis = abundance_data
order_in_geo_data <- match(geographic_dis$sp ,sp_order)
geographic_dis['awmipd'] <- D.normalized[order_in_geo_data]
ggplot(geographic_dis, aes(gx, gy)) + geom_point(aes(color = awmipd),size = 0.5, alpha = 0.8)+
theme(legend.position = '',axis.text = element_blank(),axis.ticks = element_blank(),
panel.background = element_blank())+
xlab("")+ylab("") + scale_fill_gradient2(low="#005CAF",mid = 'green',
high="#D0104C",midpoint=0.5)
library(ggplot2)
ggplot2::ggplot(geographic_dis, aes(gx, gy)) + geom_point(aes(color = awmipd),size = 0.5, alpha = 0.8)+
theme(legend.position = '',axis.text = element_blank(),axis.ticks = element_blank(),
panel.background = element_blank())+
xlab("")+ylab("") + scale_fill_gradient2(low="#005CAF",mid = 'green',
high="#D0104C",midpoint=0.5)
geographic_dis
geographic_dis = bci_alive_data
order_in_geo_data <- match(geographic_dis$sp ,sp_order)
geographic_dis['awmipd'] <- D.normalized[order_in_geo_data]
geographic_dis
ggplot2::ggplot(geographic_dis, aes(gx, gy)) + geom_point(aes(color = awmipd),size = 0.5, alpha = 0.8)+
theme(legend.position = '',axis.text = element_blank(),axis.ticks = element_blank(),
panel.background = element_blank())+
xlab("")+ylab("") + scale_fill_gradient2(low="#005CAF",mid = 'green',
high="#D0104C",midpoint=0.5)
nrow(bci_alive_data)
order_in_geo_data
length(which(is.na(order_in_geo_data)))
length(which(!is.na(order_in_geo_data)))
range(D.normalized)
hist(D.normalized)
sort(D.normalized)
ggplot2::ggplot(geographic_dis, aes(gx, gy)) + geom_point(aes(color = awmipd),size = 0.5, alpha = 0.8)+
theme(legend.position = '',axis.text = element_blank(),axis.ticks = element_blank(),
panel.background = element_blank())+
xlab("")+ylab("") + scale_fill_gradient2(low="#005CAF",mid = 'green',
high="#D0104C",midpoint=0.0005)
library(AWMIPD)
library(AWMIPD)
# Calculate AWMIPD and plot
test <- AWMIPD(tree = tree, abundance_data = abundance_data,
geographic_dis = bci_alive_data, subset_species = species_in)
test[[1]]
test[[2]]
# Load phylogenetic tree; Input 1
tree <- read.tree('./inst/control.tre')
plot(tree)
# Calculate AWMIPD and plot
test <- AWMIPD(tree = tree, abundance_data = abundance_data,
geographic_dis = bci_alive_data, subset_species = species_in)
awmipd_value <- test[[1]]
awmipd_distribution_plot <- test[[2]]
awmipd_value
awmipd_distribution_plot
# Load phylogenetic tree; Input 1
tree <- read.tree('./inst/phylomatic.tre')
plot(tree)
# Calculate AWMIPD and plot
test <- AWMIPD(tree = tree, abundance_data = abundance_data,
geographic_dis = bci_alive_data, subset_species = species_in)
tree$tip.label
# Load phylogenetic tree; Input 1
tree <- read.tree('./inst/kress.tre')
plot(tree)
tree$tip.label
a %in% c('a', 'b')
'a' %in% c('a', 'b')
c('a','b') %in% c('a', 'b', 'c')
c('a','d') %in% c('a', 'b', 'c')
any(c('a','d') %in% c('a', 'b', 'c'))
all(c('a','d') %in% c('a', 'b', 'c'))
!(c('a','d') %in% c('a', 'b', 'c'))
all(!(c('a','d') %in% c('a', 'b', 'c')))
subset_species
all(!(subset_species %in% tree$tip.label))
library(AWMIPD)
# Load phylogenetic tree; Input 1
tree <- read.tree('./inst/phylomatic.tre')
# Calculate AWMIPD and plot
test <- AWMIPD(tree = tree, abundance_data = abundance_data,
geographic_dis = bci_alive_data, subset_species = species_in)
kress
# Load phylogenetic tree; Input 1
tree <- read.tree('./inst/kress.tre')
plot(tree)
# Calculate AWMIPD and plot
test <- AWMIPD(tree = tree, abundance_data = abundance_data,
geographic_dis = bci_alive_data, subset_species = species_in)
species_name_order
sp_order
awmipd_df <- data.fram(species = species_name_order, sp = sp_order, awmipd = D.normalized)
awmipd_df <- data.frame(species = species_name_order, sp = sp_order, awmipd = D.normalized)
awmipd_df
awmipd_df <-
data.frame(species = species_name_order,
sp = sp_order,
awmipd = D.normalized,
abundance = abundance)
awmipd_df
max(awmipd_df$awmipd)
geographic_dis
ggplot2::ggplot(geographic_dis, aes(gx, gy)) + geom_point(aes(color = awmipd), size = 0.5, alpha = 0.8) +
theme(
legend.position = '',
axis.text = element_blank(),
axis.ticks = element_blank(),
panel.background = element_blank()
) +
xlab("") + ylab("") + scale_fill_gradient2(
low = "#005CAF",
mid = 'green',
high = "#D0104C",
midpoint = 0
)
ggplot2::ggplot(geographic_dis, aes(gx, gy)) + geom_point(aes(color = awmipd), size = 0.5, alpha = 0.8) +
theme(
legend.position = '',
axis.text = element_blank(),
axis.ticks = element_blank(),
panel.background = element_blank()
) +
xlab("") + ylab("") + scale_color_gradient2(
low = "#005CAF",
mid = 'green',
high = "#D0104C",
midpoint = 0.005
)
ggplot2::ggplot(geographic_dis, aes(gx, gy)) + geom_point(aes(color = awmipd), size = 0.5, alpha = 0.8) +
theme(
legend.position = '',
axis.text = element_blank(),
axis.ticks = element_blank(),
panel.background = element_blank()
) +
xlab("") + ylab("") + scale_color_gradient2(
low = "#005CAF",
mid = 'green',
high = "#D0104C",
midpoint = 0.5
)
library(AWMIPD)
# Calculate AWMIPD and plot
test <- AWMIPD(tree = tree, abundance_data = abundance_data,
geographic_dis = bci_alive_data, subset_species = species_in)
subtree <- test[[3]]
subtree
plot(subtree)
ggplot2::ggplot(geographic_dis, aes(gx, gy)) + geom_point(aes(color = awmipd), size = 0.5, alpha = 0.8) +
theme(
legend.position = 'right',
# axis.text = element_blank(),
# axis.ticks = element_blank(),
panel.background = element_blank()
) +
xlab("") + ylab("") + scale_color_gradient2(
low = "#005CAF",
mid = 'green',
high = "#D0104C",
midpoint = 0.5
)
ggplot2::ggplot(geographic_dis, aes(gx, gy)) + geom_point(aes(color = awmipd), size = 0.5, alpha = 0.8) +
theme(
legend.position = 'right',
# axis.text = element_blank(),
# axis.ticks = element_blank(),
axis.line.x = element_line(color="black", size = 2),
axis.line.y = element_line(color="black", size = 2),
panel.background = element_blank()
) +
xlab("") + ylab("") + scale_color_gradient2(
low = "#005CAF",
mid = 'green',
high = "#D0104C",
midpoint = 0.5
)
ggplot2::ggplot(geographic_dis, aes(gx, gy)) + geom_point(aes(color = awmipd), size = 0.5, alpha = 0.8) +
theme(
legend.title = 'AWMIPD',
legend.position = 'right',
# axis.text = element_blank(),
# axis.ticks = element_blank(),
axis.line.x = element_line(color="black", size = 2),
axis.line.y = element_line(color="black", size = 2),
panel.background = element_blank()
) +
xlab("") + ylab("") + scale_color_gradient2(
low = "#005CAF",
mid = 'green',
high = "#D0104C",
midpoint = 0.5
)
sp_code
bci.full7
nrow(bci.full7)
subtree
# Load phylogenetic tree; Input 1
tree <- read.tree('./inst/kress.tre')
# Calculate AWMIPD and plot
test <- AWMIPD(tree = tree, abundance_data = abundance_data,
geographic_dis = bci_alive_data, subset_species = species_in)
subtree <- test[[3]]
subtree
# Load phylogenetic tree; Input 1
tree <- read.tree('./inst/control.tre')
# Calculate AWMIPD and plot
test <- AWMIPD(tree = tree, abundance_data = abundance_data,
geographic_dis = bci_alive_data, subset_species = species_in)
subtree <- test[[3]]
subtree
awmipd_value <- test[[1]]
awmipd_value
sum(awmipd_value$abundance)
394658 - 356068
ggplot2::ggplot(geographic_dis, aes(gx, gy)) + geom_point(aes(color = awmipd), size = 0.5, alpha = 0.8) +
theme(
legend.title = element_text('AWMIPD'),
legend.position = 'right',
# axis.text = element_blank(),
# axis.ticks = element_blank(),
axis.line.x = element_line(color="black", size = 2),
axis.line.y = element_line(color="black", size = 2),
panel.background = element_blank()
) +
xlab("") + ylab("") + scale_color_gradient2(
low = "#005CAF",
mid = 'green',
high = "#D0104C",
midpoint = 0.5
)
ggplot2::ggplot(geographic_dis, aes(gx, gy)) + geom_point(aes(color = awmipd), size = 0.5, alpha = 0.8) +
theme(
legend.position = 'right',
# axis.text = element_blank(),
# axis.ticks = element_blank(),
axis.line.x = element_line(color = "black", size = 1),
axis.line.y = element_line(color = "black", size = 1),
panel.background = element_blank()
) +
xlab("") + ylab("") + labs(fill = "AWMIPD") + scale_color_gradient2(
low = "#005CAF",
mid = 'green',
high = "#D0104C",
midpoint = 0.5
)
windowsFonts()
ggplot2::ggplot(geographic_dis, aes(gx, gy)) + geom_point(aes(color = awmipd), size = 0.5, alpha = 0.8) +
theme(
legend.position = 'right',
# axis.text = element_blank(),
# axis.ticks = element_blank(),
axis.line.x = element_line(color = "black", size = 1),
axis.line.y = element_line(color = "black", size = 1),
panel.background = element_blank()
) +
xlab("") + ylab("") + scale_color_gradient2(
low = "#005CAF",
mid = 'green',
high = "#D0104C",
midpoint = 0.5,
name = "AWMIPD"
)
hist(awmipd_value$abundance)
awmipd_value$awmipd[which(awmipd_value$abundance == max(awmipd_value$abundance))]
hist(awmipd_value$awmipd)
awmipd_value$awmipd
total.dvalues
awmipd_real_value = total.dvalues/sum(total.dvalues)
awmipd_real_value
max(awmipd_real_value)
mean(awmipd_real_value)
plot(tree)
tree
awmipd_value
awmipd_value[which(awmipd_value$awmipd> 0.1),]
abundance_data
abundance_data$abundance <- 10
abundance_data
# Calculate AWMIPD and plot
test <- AWMIPD(tree = tree, abundance_data = abundance_data,
geographic_dis = bci_alive_data, subset_species = species_in)
awmipd_value <- test[[1]]
awmipd_value
awmipd_value[which(awmipd_value$awmipd> 0.1),]
distance_matrix
min(distance_matrix)
test_matrix <- distance_matrix
diag(test_matrix) = 10
min(test_matrix)
hist(test_matrix)
tree
tree$edge.length
branching.times(tree)
max(branching.times(tree))
IPD.matrix
AD.matrix
ID = 1 / distance_matrix
ID
diag(ID) = 1
AD.matrix = sweep(ID, MARGIN = 2, as.matrix(abundance), `*`)
AD.matrix
total.dvalues = rowSums(AD.matrix) * as.matrix(AD.matrix)
total.dvalues
ID = exp(- a * distance_matrix)
AD.matrix = sweep(ID, MARGIN = 2, as.matrix(abundance), `*`)
a = 1
ID = exp(- a * distance_matrix)
AD.matrix = sweep(ID, MARGIN = 2, as.matrix(abundance), `*`)
AD.matrix
total.dvalues = rowSums(AD.matrix) * as.matrix(AD.matrix)
total.dvalues
total.dvalues = rowSums(AD.matrix) * as.matrix(AD.matrix)
awmipd_real_value = total.dvalues/sum(total.dvalues)
D.normalized = (total.dvalues - min(total.dvalues)) / (max(total.dvalues) -
min(total.dvalues))
awmipd_df <-
data.frame(
species = species_name_order,
sp = sp_order,
awmipd = D.normalized,
awmipd_real = awmipd_real_value,
abundance = abundance
)
awmipd_df
awmipd_df
awmipd_df
awmipd_real_value
total.dvalues
AD.matrix
total.dvalues = rowSums(AD.matrix) * as.matrix(abundance)
total.dvalues
awmipd_real_value = total.dvalues/sum(total.dvalues)
D.normalized = (total.dvalues - min(total.dvalues)) / (max(total.dvalues) -
min(total.dvalues))
awmipd_df <-
data.frame(
species = species_name_order,
sp = sp_order,
awmipd = D.normalized,
awmipd_real = awmipd_real_value,
abundance = abundance
)
awmipd_df
library(AWMIPD)
# Load phylogenetic tree; Input 1
tree <- read.tree('./inst/control.tre')
# Load phylogenetic tree; Input 1
tree <- read.tree('./inst/control.tre')
plot(tree)
# Read the BCI data
mydatapath = './inst/'
if (!exists('bci.full7')) {
attach(paste(mydatapath, 'bci.full7.rdata', sep = ''))
}
# Extract the species mnemonic and the geographic info; Input 2
bci_alive_data <-
subset(bci.full7,
status = 'A',
select = c('sp', 'gx', 'gy'))
sp_code <- unique(bci_alive_data[, 1])
# Get full species names
load('./inst/bci.spptable.Rdata')
sp_name <- NULL
genus_name <- NULL
for (i in c(1:length(sp_code))) {
index <- which(bci.spptable$sp == sp_code[i])
if (length(index) == 0) {
sp_name <-
c(sp_name, 0)
genus_name <-
c(genus_name, 0)
} else {
sp_name <-
c(sp_name, bci.spptable$Species[index])
genus_name <-
c(genus_name, bci.spptable$Genus[index])
}
}
species_name <- paste0(genus_name, '_', sp_name)
sp_code_name <- cbind(sp_code, species_name)
recognized_species <- which(species_name %in% tree$tip.label)
recognized_code_name <- sp_code_name[recognized_species,]
# Calculate the abundance of each species; Input 3
abundance <- NULL
for(i in c(1:nrow(recognized_code_name))) {
abundance_species <- length(which(bci_alive_data[, 1] == recognized_code_name[i, 1]))
abundance <- c(abundance, abundance_species)
}
# Wrap the sp code, species names and the abundance data into a data frame.
abundance_data <- data.frame(sp = recognized_code_name[,1], species = recognized_code_name[,2], abundance = abundance)
# Subsetting the species; Input 4
# not_in_species <- subset(species_name, !(species_name %in% tree$tip.label))
species_in <- subset(species_name, (species_name %in% tree$tip.label))
# abundance_data$abundance <- 10
# Calculate AWMIPD and plot
test <- AWMIPD(tree = tree, abundance_data = abundance_data,
geographic_dis = bci_alive_data, subset_species = species_in)
awmipd_value <- test[[1]]
awmipd_distribution_plot <- test[[2]]
subtree <- test[[3]]
awmipd_distribution_plot
test_inv <- AWMIPD(tree = tree, abundance_data = abundance_data,
geographic_dis = bci_alive_data, subset_species = species_in, pdmode = 'inv')
plot_inv <- test_inv[[2]]
plot_inv
# abundance_data$abundance <- 10
# Calculate AWMIPD and plot
test <- AWMIPD(tree = tree, abundance_data = abundance_data,
geographic_dis = bci_alive_data, subset_species = species_in,
a = 0.1)
awmipd_distribution_plot <- test[[2]]
awmipd_distribution_plot
# abundance_data$abundance <- 10
# Calculate AWMIPD and plot
test <- AWMIPD(tree = tree, abundance_data = abundance_data,
geographic_dis = bci_alive_data, subset_species = species_in,
a = 10)
awmipd_value <- test[[1]]
awmipd_distribution_plot <- test[[2]]
awmipd_distribution_plot
# abundance_data$abundance <- 10
# Calculate AWMIPD and plot
test <- AWMIPD(tree = tree, abundance_data = abundance_data,
geographic_dis = bci_alive_data, subset_species = species_in,
a = 100)
awmipd_value <- test[[1]]
awmipd_distribution_plot <- test[[2]]
awmipd_distribution_plot
awmipd_value
# abundance_data$abundance <- 10
# Calculate AWMIPD and plot
test <- AWMIPD(tree = tree, abundance_data = abundance_data,
geographic_dis = bci_alive_data, subset_species = species_in,
a = 1000)
awmipd_value <- test[[1]]
awmipd_distribution_plot <- test[[2]]
awmipd_value
awmipd_distribution_plot
# abundance_data$abundance <- 10
# Calculate AWMIPD and plot
test <- AWMIPD(tree = tree, abundance_data = abundance_data,
geographic_dis = bci_alive_data, subset_species = species_in,
a = 0.01)
awmipd_value <- test[[1]]
awmipd_distribution_plot <- test[[2]]
awmipd_value
awmipd_distribution_plot
range(distance_matrix)
distance_matrix
ID = exp(- a * distance_matrix)
AD.matrix = sweep(ID, MARGIN = 2, as.matrix(abundance), `*`)
ID
AD.matrix
total.dvalues = rowSums(AD.matrix) * as.matrix(abundance)
total.dvalues
total.dvalues
total.dvalues = rowSums(AD.matrix) * as.matrix(abundance)
total.dvalues
awmipd_real_value = total.dvalues/sum(total.dvalues)
awmipd_real_value
awmipd_df
bci.full7
if (!exists('bci.full7')) {
attach(paste(mydatapath, 'bci.full7.rdata', sep = ''))
}
bci.full7$stemID
bci.full7$stemID[which(!is.na(bci.full7$stemID))]
length(bci.full7$stemID[which(!is.na(bci.full7$stemID))])
length(bci.full7$dbh[which(!is.na(bci.full7$dbh))])
bci_alive_data
# Extract the species mnemonic and the geographic info; Input 2
bci_alive_data <-
subset(bci.full7,
status = 'A',
select = c('sp', 'gx', 'gy', 'dbh'))
bci_alive_data
